const express = require('express');
const sql = require('mssql');
const path = require('path');
const { check, validationResult } = require('express-validator');
const app = express();

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static('public'));
require('dotenv').config();

const dbConfig = {
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    server: process.env.DB_HOST,
    database: process.env.DB_NAME,
    options: {
        encrypt: false,
        trustServerCertificate: true
    }
};

app.get('/', [
    check('fechaInicio').isISO8601().toDate().withMessage('Debe ser una fecha válida').optional(),
    check('fechaFin').isISO8601().toDate().withMessage('Debe ser una fecha válida').optional(),
    ], (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    function formatDate(date) {
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2)
        month = '0' + month;
    if (day.length < 2)
        day = '0' + day;

    return [year, month, day].join('-');
}

    // Establecemos las fechas de inicio y fin por defecto para el día actual
    let fechaInicio = new Date();
    let fechaFin = new Date();

   if (req.query.fechaInicio && !isNaN(Date.parse(req.query.fechaInicio))) {
    let tempFechaInicio = new Date(req.query.fechaInicio);
    fechaInicio = new Date(Date.UTC(
        tempFechaInicio.getUTCFullYear(),
        tempFechaInicio.getUTCMonth(),
        tempFechaInicio.getUTCDate(),
    ));
}

    if (req.query.fechaFin && !isNaN(Date.parse(req.query.fechaFin))) {
        let tempFechaFin = new Date(req.query.fechaFin);
        fechaFin = new Date(Date.UTC(
            tempFechaFin.getUTCFullYear(),
            tempFechaFin.getUTCMonth(),
            tempFechaFin.getUTCDate(),
        ));
}



    // Configura las horas al inicio y al final del día
    fechaInicio.setHours(0, 0, 0, 0);
    fechaFin.setHours(23, 59, 59, 999);

    // Convierte las fechas a formato 'YYYY-MM-DD' después de establecer las horas
    fechaInicio = formatDate(fechaInicio);
    fechaFin = formatDate(fechaFin);

    let fecha = req.query.fecha;
    let page = req.query.page;
    if (!page) {
        page = 1;
    } else if (page < 1) {
        res.status(400).send('Invalid page number');
        return;
    }

    if (!fecha) {
        fecha = new Date();
    } else {
        fecha = new Date(fecha);
    }
    fecha = fecha.getFullYear() + '-' + (fecha.getMonth() + 1) + '-' + fecha.getDate();

    const pageSize = 10;  // Define your page size here

    const skip = (page - 1) * pageSize;

    const noticiasPromise = sql.connect(dbConfig).then(function() {
        return new sql.Request().query(`
            SELECT NoticiasRadio.*, Medios.nombre AS medio_nombre
            FROM NoticiasRadio
            LEFT JOIN Medios ON NoticiasRadio.medio_id = Medios.id
            WHERE CONVERT(date, NoticiasRadio.fecha_medio) BETWEEN '${fechaInicio}' AND '${fechaFin}'
            ORDER BY NoticiasRadio.id OFFSET ${skip} ROWS FETCH NEXT ${pageSize} ROWS ONLY

        `);
    });

    const palabrasClavesPromise = sql.connect(dbConfig).then(function() {
        return sql.query`SELECT * FROM PalabrasClaves`;
    });

    const totalNoticiasPromise = sql.connect(dbConfig).then(function() {
        return sql.query`SELECT COUNT(*) as total FROM NoticiasRadio`;
    });

    Promise.all([noticiasPromise, palabrasClavesPromise, totalNoticiasPromise])
        .then(function(values) {
            const noticias = values[0].recordset;
            const palabrasClaves = values[1].recordset.map(palabra => palabra.palabra);
            const totalNoticias = values[2].recordset[0].total;
            res.render('index', {
            noticias: noticias,
            palabrasClaves: palabrasClaves,
            fechaInicio: fechaInicio,
            fechaFin: fechaFin,
            page: parseInt(page),
            pageSize: pageSize,
            totalNoticias: totalNoticias
            });
        })
        .catch(function(err) {
            console.log(err);
            res.status(500).send(err.message);
        });
});

app.get('/noticia/:id', function(req, res) {
    const noticiaId = req.params.id;

    const noticiaPromise = sql.connect(dbConfig).then(function() {
        return new sql.Request().query(`SELECT * FROM NoticiasRadio WHERE id = ${noticiaId}`);
    });

    const palabrasClavesPromise = sql.connect(dbConfig).then(function() {
        return sql.query`SELECT * FROM PalabrasClaves`;
    });

    Promise.all([noticiaPromise, palabrasClavesPromise])
        .then(function(values) {
            const noticia = values[0].recordset[0];
            const palabrasClaves = values[1].recordset.map(palabra => palabra.palabra);
            res.render('noticia', {noticia: noticia, palabrasClaves: palabrasClaves});
        })
        .catch(function(err) {
            console.log(err);
            res.status(500).send(err.message);
        });
});

app.get('/alertas', function(req, res) {
    const keyword = req.query.keyword;

    let alertasPromise;
    if (keyword) {
        alertasPromise = sql.connect(dbConfig).then(function() {
            return new sql.Request().query(`SELECT * FROM Alertas WHERE keyword LIKE '%${keyword}%'`);
        });
    } else {
        alertasPromise = sql.connect(dbConfig).then(function() {
            return sql.query`SELECT * FROM Alertas`;
        });
    }

    alertasPromise
        .then(function(result) {
            const alertas = result.recordset;
            res.render('alertas', {alertas: alertas});
        })
        .catch(function(err) {
            console.log(err);
            res.status(500).send(err.message);
        });
});

app.listen(3000, function() {
    console.log('App listening on port 3000!');
});
